{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { combineReducers } from 'redux';\nimport request from '../../helpers/request';\nimport { openNotification } from '../notifications';\nexport const userProfileSelector = state => state.auth.userProfile;\nexport const userPermissionsSelector = state => state.auth.permissions;\nexport const tokensSelector = state => state.auth.tokens;\nexport const isAuthorizedSelector = state => !!state.auth.tokens.accessToken;\nexport const isLoadingUserProfileSelector = state => state.auth.isLoadingUserProfile;\nconst actionsPrefix = 'AUTH';\nexport const loginUserRequest = createAction(\"\".concat(actionsPrefix, \"/LOGIN_USER_REQUEST\"));\nexport const registrationUserRequest = createAction(\"\".concat(actionsPrefix, \"/REGISTRATION_USER_REQUEST\"));\nexport const setProfileData = createAction(\"\".concat(actionsPrefix, \"/SET_PROFILE_DATA\"));\nexport const setTokenData = createAction(\"\".concat(actionsPrefix, \"/SET_TOKEN_DATA\"));\nexport const logoutUser = createAction(\"\".concat(actionsPrefix, \"/LOGOUT_USER\"));\nexport const setIsLoadingUserProfile = createAction(\"\".concat(actionsPrefix, \"/SET_IS_LOADING_USER_PROFILE\"));\nconst isLoadingUserProfile = handleActions({\n  [setIsLoadingUserProfile]: (_, action) => action.payload\n}, false);\nconst userProfile = handleActions({\n  [setProfileData]: (state, action) => {\n    const _action$payload = action.payload,\n          id = _action$payload.id,\n          image = _action$payload.image,\n          middleName = _action$payload.middleName,\n          surName = _action$payload.surName,\n          username = _action$payload.username,\n          firstName = _action$payload.firstName;\n    return {\n      id,\n      image,\n      firstName,\n      middleName,\n      surName,\n      username\n    };\n  },\n  [logoutUser]: () => null\n}, null);\nconst defaultPermissions = {\n  chat: {\n    C: false,\n    D: false,\n    R: false,\n    U: false\n  },\n  news: {\n    C: false,\n    D: false,\n    R: false,\n    U: false\n  },\n  settings: {\n    C: false,\n    D: false,\n    R: false,\n    U: false\n  }\n};\nconst permissions = handleActions({\n  [setProfileData]: (state, action) => {\n    const permission = action.payload.permission;\n    return permission;\n  },\n  [logoutUser]: () => defaultPermissions\n}, defaultPermissions);\nconst tokens = handleActions({\n  [setTokenData]: (state, action) => {\n    const _action$payload2 = action.payload,\n          accessToken = _action$payload2.accessToken,\n          accessTokenExpiredAt = _action$payload2.accessTokenExpiredAt,\n          refreshToken = _action$payload2.refreshToken,\n          refreshTokenExpiredAt = _action$payload2.refreshTokenExpiredAt;\n    return {\n      accessToken,\n      accessTokenExpiredAt,\n      refreshToken,\n      refreshTokenExpiredAt\n    };\n  },\n  [logoutUser]: () => ({\n    accessToken: null,\n    accessTokenExpiredAt: null,\n    refreshToken: null,\n    refreshTokenExpiredAt: null\n  })\n}, {\n  accessToken: null,\n  accessTokenExpiredAt: null,\n  refreshToken: null,\n  refreshTokenExpiredAt: null\n});\nexport default combineReducers({\n  userProfile,\n  permissions,\n  tokens,\n  isLoadingUserProfile\n});\nexport const loginUser = ({\n  username,\n  password\n}) => (dispatch, getState) => new Promise((resolve, reject) => {\n  const data = {\n    username,\n    password\n  };\n  request({\n    url: '/login',\n    method: 'POST',\n    data,\n    isWithoutToken: true,\n    dispatch,\n    getState\n  }).then(data => {\n    dispatch(openNotification({\n      text: 'Вы успешно вошли!',\n      variant: 'success'\n    }));\n    const accessToken = data.accessToken,\n          accessTokenExpiredAt = data.accessTokenExpiredAt,\n          refreshToken = data.refreshToken,\n          refreshTokenExpiredAt = data.refreshTokenExpiredAt;\n    localStorage.setItem('token-data', JSON.stringify({\n      accessToken,\n      accessTokenExpiredAt,\n      refreshToken,\n      refreshTokenExpiredAt\n    }));\n    dispatch(setProfileData(data));\n    dispatch(setTokenData(data));\n    resolve(data);\n  }).catch(error => {\n    dispatch(openNotification({\n      text: error.message,\n      variant: 'error'\n    }));\n    reject(error);\n  });\n});\nexport const registerUser = ({\n  username,\n  password,\n  firstname,\n  lastname,\n  patronicname\n}) => (dispatch, getState) => new Promise((resolve, reject) => {\n  const data = {\n    username,\n    surName: lastname,\n    firstName: firstname,\n    middleName: patronicname,\n    password\n  };\n  request({\n    url: '/registration',\n    data,\n    method: 'POST',\n    isWithoutToken: true,\n    dispatch,\n    getState\n  }).then(() => {\n    dispatch(openNotification({\n      text: 'Вы успешно зарегистрированы!',\n      variant: 'success'\n    }));\n    resolve(data);\n  }).catch(error => {\n    dispatch(openNotification({\n      text: error.message,\n      variant: 'error'\n    }));\n    reject(error);\n  });\n});\nexport const getUserProfileFromToken = () => (dispatch, getState) => {\n  const tokenData = localStorage.getItem('token-data');\n  if (!tokenData) return;\n  dispatch(setTokenData(JSON.parse(tokenData)));\n  request({\n    url: '/profile',\n    method: 'GET',\n    dispatch,\n    getState\n  }).then(data => {\n    dispatch(setProfileData(data));\n  }).catch(error => {});\n};\nexport const refreshTokenRequest = () => (dispatch, getState) => new Promise((resolve, reject) => {\n  request({\n    url: '/refresh-token',\n    method: 'POST',\n    isRefresh: true,\n    dispatch,\n    getState\n  }).then(data => {\n    dispatch(setTokenData(data));\n    resolve(resolve);\n  }).catch(error => reject(error));\n});\nexport const logout = () => dispatch => {\n  localStorage.removeItem('token-data');\n  dispatch(logoutUser());\n  openNotification({\n    text: 'Вы вышли из системы',\n    variant: 'info'\n  });\n};\nexport const saveProfile = ({\n  firstName,\n  surName,\n  middleName,\n  oldPassword,\n  newPassword,\n  avatar\n}) => (dispatch, getState) => new Promise(resolve => {\n  const data = new FormData();\n  data.append('firstName', firstName);\n  data.append('surName', surName);\n  data.append('middleName', middleName);\n  data.append('oldPassword', oldPassword);\n  data.append('newPassword', newPassword);\n  data.append('avatar', avatar);\n  dispatch(setIsLoadingUserProfile(true));\n  request({\n    url: '/profile',\n    method: 'PATCH',\n    data,\n    getState,\n    dispatch\n  }).then(data => {\n    dispatch(setProfileData(data));\n    dispatch(openNotification({\n      text: 'Профиль успешно обновлен!',\n      variant: 'success'\n    }));\n    resolve(true);\n  }).catch(error => dispatch(openNotification({\n    text: error.message,\n    variant: 'error'\n  }))).finally(() => dispatch(setIsLoadingUserProfile(false)));\n});","map":{"version":3,"sources":["/Users/tweecezor/Desktop/nodeJS/src/store/auth/index.js"],"names":["createAction","handleActions","combineReducers","request","openNotification","userProfileSelector","state","auth","userProfile","userPermissionsSelector","permissions","tokensSelector","tokens","isAuthorizedSelector","accessToken","isLoadingUserProfileSelector","isLoadingUserProfile","actionsPrefix","loginUserRequest","registrationUserRequest","setProfileData","setTokenData","logoutUser","setIsLoadingUserProfile","_","action","payload","id","image","middleName","surName","username","firstName","defaultPermissions","chat","C","D","R","U","news","settings","permission","accessTokenExpiredAt","refreshToken","refreshTokenExpiredAt","loginUser","password","dispatch","getState","Promise","resolve","reject","data","url","method","isWithoutToken","then","text","variant","localStorage","setItem","JSON","stringify","catch","error","message","registerUser","firstname","lastname","patronicname","getUserProfileFromToken","tokenData","getItem","parse","refreshTokenRequest","isRefresh","logout","removeItem","saveProfile","oldPassword","newPassword","avatar","FormData","append","finally"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport { combineReducers } from 'redux';\nimport request from '../../helpers/request';\nimport { openNotification } from '../notifications';\nexport const userProfileSelector = state => state.auth.userProfile;\nexport const userPermissionsSelector = state => state.auth.permissions;\nexport const tokensSelector = state => state.auth.tokens;\nexport const isAuthorizedSelector = state => !!state.auth.tokens.accessToken;\nexport const isLoadingUserProfileSelector = state => state.auth.isLoadingUserProfile;\n\nconst actionsPrefix = 'AUTH';\nexport const loginUserRequest = createAction(`${actionsPrefix}/LOGIN_USER_REQUEST`);\nexport const registrationUserRequest = createAction(`${actionsPrefix}/REGISTRATION_USER_REQUEST`);\nexport const setProfileData = createAction(`${actionsPrefix}/SET_PROFILE_DATA`);\nexport const setTokenData = createAction(`${actionsPrefix}/SET_TOKEN_DATA`);\nexport const logoutUser = createAction(`${actionsPrefix}/LOGOUT_USER`);\nexport const setIsLoadingUserProfile = createAction(`${actionsPrefix}/SET_IS_LOADING_USER_PROFILE`);\n\nconst isLoadingUserProfile = handleActions(\n  {\n    [setIsLoadingUserProfile]: (_, action) => action.payload\n  },\n  false\n);\n\nconst userProfile = handleActions(\n  {\n    [setProfileData]: (state, action) => {\n      const { id, image, middleName, surName, username, firstName } = action.payload;\n      return { id, image, firstName, middleName, surName, username };\n    },\n    [logoutUser]: () => null\n  },\n  null\n);\nconst defaultPermissions = {\n  chat: { C: false, D: false, R: false, U: false },\n  news: { C: false, D: false, R: false, U: false },\n  settings: { C: false, D: false, R: false, U: false }\n};\nconst permissions = handleActions(\n  {\n    [setProfileData]: (state, action) => {\n      const { permission } = action.payload;\n      return permission;\n    },\n    [logoutUser]: () => defaultPermissions\n  },\n  defaultPermissions\n);\n\nconst tokens = handleActions(\n  {\n    [setTokenData]: (state, action) => {\n      const {\n        accessToken,\n        accessTokenExpiredAt,\n        refreshToken,\n        refreshTokenExpiredAt\n      } = action.payload;\n      return {\n        accessToken,\n        accessTokenExpiredAt,\n        refreshToken,\n        refreshTokenExpiredAt\n      };\n    },\n    [logoutUser]: () => ({\n      accessToken: null,\n      accessTokenExpiredAt: null,\n      refreshToken: null,\n      refreshTokenExpiredAt: null\n    })\n  },\n  {\n    accessToken: null,\n    accessTokenExpiredAt: null,\n    refreshToken: null,\n    refreshTokenExpiredAt: null\n  }\n);\n\nexport default combineReducers({\n  userProfile,\n  permissions,\n  tokens,\n  isLoadingUserProfile\n});\n\nexport const loginUser = ({ username, password }) => (dispatch, getState) =>\n  new Promise((resolve, reject) => {\n    const data = {\n      username,\n      password\n    };\n    request({\n      url: '/login',\n      method: 'POST',\n      data,\n      isWithoutToken: true,\n      dispatch,\n      getState\n    })\n      .then(data => {\n        dispatch(openNotification({ text: 'Вы успешно вошли!', variant: 'success' }));\n        const { accessToken, accessTokenExpiredAt, refreshToken, refreshTokenExpiredAt } = data;\n        localStorage.setItem(\n          'token-data',\n          JSON.stringify({\n            accessToken,\n            accessTokenExpiredAt,\n            refreshToken,\n            refreshTokenExpiredAt\n          })\n        );\n        dispatch(setProfileData(data));\n        dispatch(setTokenData(data));\n        resolve(data);\n      })\n      .catch(error => {\n        dispatch(\n          openNotification({\n            text: error.message,\n            variant: 'error'\n          })\n        );\n        reject(error);\n      });\n  });\n\nexport const registerUser = ({ username, password, firstname, lastname, patronicname }) => (\n  dispatch,\n  getState\n) =>\n  new Promise((resolve, reject) => {\n    const data = {\n      username,\n      surName: lastname,\n      firstName: firstname,\n      middleName: patronicname,\n      password\n    };\n    request({\n      url: '/registration',\n      data,\n      method: 'POST',\n      isWithoutToken: true,\n      dispatch,\n      getState\n    })\n      .then(() => {\n        dispatch(\n          openNotification({\n            text: 'Вы успешно зарегистрированы!',\n            variant: 'success'\n          })\n        );\n        resolve(data);\n      })\n      .catch(error => {\n        dispatch(\n          openNotification({\n            text: error.message,\n            variant: 'error'\n          })\n        );\n        reject(error);\n      });\n  });\n\nexport const getUserProfileFromToken = () => (dispatch, getState) => {\n  const tokenData = localStorage.getItem('token-data');\n  if (!tokenData) return;\n  dispatch(setTokenData(JSON.parse(tokenData)));\n  request({ url: '/profile', method: 'GET', dispatch, getState })\n    .then(data => {\n      dispatch(setProfileData(data));\n    })\n    .catch(error => {});\n};\n\nexport const refreshTokenRequest = () => (dispatch, getState) =>\n  new Promise((resolve, reject) => {\n    request({ url: '/refresh-token', method: 'POST', isRefresh: true, dispatch, getState })\n      .then(data => {\n        dispatch(setTokenData(data));\n        resolve(resolve);\n      })\n      .catch(error => reject(error));\n  });\n\nexport const logout = () => dispatch => {\n  localStorage.removeItem('token-data');\n  dispatch(logoutUser());\n  openNotification({\n    text: 'Вы вышли из системы',\n    variant: 'info'\n  });\n};\n\nexport const saveProfile = ({ firstName, surName, middleName, oldPassword, newPassword, avatar }) => (\n  dispatch,\n  getState\n) =>\n  new Promise(resolve => {\n    \n    const data = new FormData()\n    data.append('firstName', firstName)\n    data.append('surName', surName)\n    data.append('middleName', middleName)\n    data.append('oldPassword', oldPassword)\n    data.append('newPassword', newPassword)\n    data.append('avatar', avatar);\n\n    dispatch(setIsLoadingUserProfile(true));\n    request({ url: '/profile', method: 'PATCH', data, getState, dispatch })\n      .then(data => {\n        dispatch(setProfileData(data));\n        dispatch(openNotification({ text: 'Профиль успешно обновлен!', variant: 'success' }));\n        resolve(true);\n      })\n      .catch(error => dispatch(openNotification({ text: error.message, variant: 'error' })))\n      .finally(() => dispatch(setIsLoadingUserProfile(false)));\n  });\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectWithoutProperties from \"/Users/tweecezor/Desktop/nodeJS/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/tweecezor/Desktop/nodeJS/src/components/common/withNotificationsHOC.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { notificationsSelector, openNotification, closeNotification } from '../../store/notifications';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { amber, green } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { makeStyles } from '@material-ui/core/styles';\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\nconst useStyles1 = makeStyles(theme => ({\n  success: {\n    backgroundColor: green[600]\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark\n  },\n  info: {\n    backgroundColor: theme.palette.primary.main\n  },\n  warning: {\n    backgroundColor: amber[700]\n  },\n  icon: {\n    fontSize: 20\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1)\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center'\n  }\n}));\n\nfunction MySnackbarContentWrapper(props) {\n  const classes = useStyles1();\n\n  const className = props.className,\n        message = props.message,\n        onClose = props.onClose,\n        variant = props.variant,\n        other = _objectWithoutProperties(props, [\"className\", \"message\", \"onClose\", \"variant\"]);\n\n  const Icon = variantIcon[variant];\n  return React.createElement(SnackbarContent, Object.assign({\n    className: clsx(classes[variant], className),\n    \"aria-describedby\": \"client-snackbar\",\n    message: React.createElement(\"span\", {\n      id: \"client-snackbar\",\n      className: classes.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      className: clsx(classes.icon, classes.iconVariant),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), message),\n    action: [React.createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"close\",\n      color: \"inherit\",\n      onClick: onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      className: classes.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }))]\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }));\n}\n\nMySnackbarContentWrapper.propTypes = {\n  className: PropTypes.string,\n  message: PropTypes.string,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired\n};\nexport default (WrappedComponent => {\n  const withNotifications = (_ref) => {\n    let openNotification = _ref.openNotification,\n        closeNotification = _ref.closeNotification,\n        notifications = _ref.notifications,\n        other = _objectWithoutProperties(_ref, [\"openNotification\", \"closeNotification\", \"notifications\"]);\n\n    const handleClose = notificationId => (e, reason) => {\n      if (reason === 'clickaway') {\n        return;\n      }\n\n      closeNotification(notificationId);\n    };\n\n    const currentNotification = notifications.find(notification => !!notification.isActive);\n    return React.createElement(React.Fragment, null, React.createElement(WrappedComponent, Object.assign({}, other, {\n      openNotification: openNotification,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })), currentNotification && React.createElement(Snackbar, {\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      open: true,\n      autoHideDuration: 2500,\n      onClose: handleClose(currentNotification.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(MySnackbarContentWrapper, {\n      onClose: handleClose(currentNotification.id),\n      variant: currentNotification.variant,\n      message: currentNotification.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })));\n  };\n\n  const mapStateToProps = state => ({\n    notifications: notificationsSelector(state)\n  });\n\n  const mapDispatchToProps = {\n    openNotification,\n    closeNotification\n  };\n  return connect(mapStateToProps, mapDispatchToProps)(withNotifications);\n});","map":{"version":3,"sources":["/Users/tweecezor/Desktop/nodeJS/src/components/common/withNotificationsHOC.jsx"],"names":["React","connect","notificationsSelector","openNotification","closeNotification","PropTypes","clsx","CheckCircleIcon","ErrorIcon","InfoIcon","CloseIcon","amber","green","IconButton","Snackbar","SnackbarContent","WarningIcon","makeStyles","variantIcon","success","warning","error","info","useStyles1","theme","backgroundColor","palette","dark","primary","main","icon","fontSize","iconVariant","opacity","marginRight","spacing","message","display","alignItems","MySnackbarContentWrapper","props","classes","className","onClose","variant","other","Icon","propTypes","string","func","oneOf","isRequired","WrappedComponent","withNotifications","notifications","handleClose","notificationId","e","reason","currentNotification","find","notification","isActive","vertical","horizontal","id","text","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  notificationsSelector,\n  openNotification,\n  closeNotification\n} from '../../store/notifications';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { amber, green } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\n\nconst useStyles1 = makeStyles(theme => ({\n  success: {\n    backgroundColor: green[600]\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark\n  },\n  info: {\n    backgroundColor: theme.palette.primary.main\n  },\n  warning: {\n    backgroundColor: amber[700]\n  },\n  icon: {\n    fontSize: 20\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1)\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center'\n  }\n}));\n\nfunction MySnackbarContentWrapper(props) {\n  const classes = useStyles1();\n  const { className, message, onClose, variant, ...other } = props;\n  const Icon = variantIcon[variant];\n\n  return (\n    <SnackbarContent\n      className={clsx(classes[variant], className)}\n      aria-describedby=\"client-snackbar\"\n      message={\n        <span id=\"client-snackbar\" className={classes.message}>\n          <Icon className={clsx(classes.icon, classes.iconVariant)} />\n          {message}\n        </span>\n      }\n      action={[\n        <IconButton\n          key=\"close\"\n          aria-label=\"close\"\n          color=\"inherit\"\n          onClick={onClose}\n        >\n          <CloseIcon className={classes.icon} />\n        </IconButton>\n      ]}\n      {...other}\n    />\n  );\n}\n\nMySnackbarContentWrapper.propTypes = {\n  className: PropTypes.string,\n  message: PropTypes.string,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired\n};\n\nexport default WrappedComponent => {\n  const withNotifications = ({\n    openNotification,\n    closeNotification,\n    notifications,\n    ...other\n  }) => {\n    const handleClose = notificationId => (e, reason) => {\n      if (reason === 'clickaway') {\n        return;\n      }\n      closeNotification(notificationId);\n    };\n    const currentNotification = notifications.find(\n      notification => !!notification.isActive\n    );\n    return (\n      <>\n        <WrappedComponent {...other} openNotification={openNotification} />\n        {currentNotification && (\n          <Snackbar\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'right'\n            }}\n            open\n            autoHideDuration={2500}\n            onClose={handleClose(currentNotification.id)}\n          >\n            <MySnackbarContentWrapper\n              onClose={handleClose(currentNotification.id)}\n              variant={currentNotification.variant}\n              message={currentNotification.text}\n            />\n          </Snackbar>\n        )}\n      </>\n    );\n  };\n\n  const mapStateToProps = state => ({\n    notifications: notificationsSelector(state)\n  });\n  const mapDispatchToProps = {\n    openNotification,\n    closeNotification\n  };\n  return connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(withNotifications);\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import socketIO from 'socket.io-client';\nimport { createAction, handleActions } from 'redux-actions';\nimport { combineReducers } from 'redux';\nimport { userProfileSelector } from '../auth';\nlet socket = null;\nexport const chatUsersSelector = state => state.chat.users;\nexport const chatMessagesList = state => state.chat.messages;\nexport const chatSelectedRoomSelector = state => state.chat.selectedRoom;\nexport const chatMessageText = state => state.chat.messageText;\nconst actionsPrefix = 'CHAT';\nexport const setUsers = createAction(\"\".concat(actionsPrefix, \"/SET_USERS\"));\nexport const addUser = createAction(\"\".concat(actionsPrefix, \"/ADD_USER\"));\nexport const updateUser = createAction(\"\".concat(actionsPrefix, \"/UPDATE_USER\"));\nexport const removeUser = createAction(\"\".concat(actionsPrefix, \"/REMOVE_USER\"));\nexport const appendMessage = createAction(\"\".concat(actionsPrefix, \"/ADD_MESSAGE\"));\nexport const setRoomHistory = createAction(\"\".concat(actionsPrefix, \"/SET_ROOM_HISTORY\"));\nexport const setToZeroMessages = createAction(\"\".concat(actionsPrefix, \"/SET_TO_ZERO_MESSAGES\"));\nexport const setSelectedRoom = createAction(\"\".concat(actionsPrefix, \"/SET_SELECTED_ROOM\"));\nexport const setMessageText = createAction(\"\".concat(actionsPrefix, \"/SET_MESSAGE_TEXT\"));\nexport const resetMessage = createAction(\"\".concat(actionsPrefix, \"/RESET_MESSAGE\"));\nconst users = handleActions({\n  [setUsers]: (_, action) => action.payload,\n  [addUser]: (state, action) => [action.payload, ...state],\n  [updateUser]: (state, action) => state.map(user => user.userId === action.payload.userId ? action.payload : user),\n  [removeUser]: (state, action) => state.filter(user => user.socketId !== action.payload)\n}, []);\nconst messages = handleActions({\n  [appendMessage]: (state, action) => [...state, action.payload],\n  [setRoomHistory]: (state, action) => action.payload,\n  [setToZeroMessages]: () => []\n}, []);\nconst selectedRoom = handleActions({\n  [setSelectedRoom]: (_, action) => action.payload\n}, null);\nconst messageText = handleActions({\n  [setMessageText]: (_, action) => action.payload,\n  [resetMessage]: () => ''\n}, '');\nexport default combineReducers({\n  users,\n  messages,\n  selectedRoom,\n  messageText\n});\nexport const connectSocket = () => (dispatch, getState) => {\n  const userProfile = userProfileSelector(getState());\n  socket = socketIO('http://localhost:3000');\n  socket.emit('users:connect', {\n    userId: userProfile.id,\n    username: userProfile.username\n  });\n  socket.on('users:list', data => dispatch(setUsers(data))).on('users:add', data => dispatch(addUser(data))).on('users:leave', data => {\n    dispatch(removeUser(data));\n    const selectedRoom = chatSelectedRoomSelector(getState());\n    if (selectedRoom && selectedRoom.socketId === data) dispatch(setSelectedRoom(null));\n  }).on('message:history', data => dispatch(setRoomHistory(data))).on('message:add', data => dispatch(appendMessage(data)));\n};\nexport const connectRoom = ({\n  userId,\n  socketId\n}) => (dispatch, getState) => {\n  const userProfile = userProfileSelector(getState());\n  dispatch(setToZeroMessages());\n  dispatch(setSelectedRoom({\n    recipientId: userId,\n    socketId\n  }));\n  socket.emit('message:history', {\n    recipientId: userId,\n    userId: userProfile.id\n  });\n};\nexport const sendMessage = () => (dispatch, getState) => {\n  const state = getState();\n  const userProfile = userProfileSelector(state);\n  const selectedRoom = chatSelectedRoomSelector(state);\n  const messageText = chatMessageText(state);\n  socket.emit('message:add', {\n    senderId: userProfile.id,\n    recipientId: selectedRoom.recipientId,\n    roomId: selectedRoom.socketId,\n    text: messageText\n  });\n  dispatch(resetMessage());\n};\nexport const disconnectSocket = () => dispatch => {\n  socket && socket.disconnect();\n  dispatch(setUsers([]));\n  dispatch(setToZeroMessages());\n  dispatch(setSelectedRoom(null));\n  dispatch(resetMessage());\n};","map":{"version":3,"sources":["/Users/tweecezor/Desktop/nodeJS/src/store/chat/index.js"],"names":["socketIO","createAction","handleActions","combineReducers","userProfileSelector","socket","chatUsersSelector","state","chat","users","chatMessagesList","messages","chatSelectedRoomSelector","selectedRoom","chatMessageText","messageText","actionsPrefix","setUsers","addUser","updateUser","removeUser","appendMessage","setRoomHistory","setToZeroMessages","setSelectedRoom","setMessageText","resetMessage","_","action","payload","map","user","userId","filter","socketId","connectSocket","dispatch","getState","userProfile","emit","id","username","on","data","connectRoom","recipientId","sendMessage","senderId","roomId","text","disconnectSocket","disconnect"],"mappings":"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","sourcesContent":["import socketIO from 'socket.io-client';\nimport { createAction, handleActions } from 'redux-actions';\nimport { combineReducers } from 'redux';\nimport { userProfileSelector } from '../auth';\nlet socket = null;\n\nexport const chatUsersSelector = state => state.chat.users;\nexport const chatMessagesList = state => state.chat.messages;\nexport const chatSelectedRoomSelector = state => state.chat.selectedRoom;\nexport const chatMessageText = state => state.chat.messageText;\n\nconst actionsPrefix = 'CHAT';\nexport const setUsers = createAction(`${actionsPrefix}/SET_USERS`);\nexport const addUser = createAction(`${actionsPrefix}/ADD_USER`);\nexport const updateUser = createAction(`${actionsPrefix}/UPDATE_USER`);\nexport const removeUser = createAction(`${actionsPrefix}/REMOVE_USER`);\nexport const appendMessage = createAction(`${actionsPrefix}/ADD_MESSAGE`);\nexport const setRoomHistory = createAction(`${actionsPrefix}/SET_ROOM_HISTORY`);\nexport const setToZeroMessages = createAction(`${actionsPrefix}/SET_TO_ZERO_MESSAGES`);\nexport const setSelectedRoom = createAction(`${actionsPrefix}/SET_SELECTED_ROOM`);\nexport const setMessageText = createAction(`${actionsPrefix}/SET_MESSAGE_TEXT`);\nexport const resetMessage = createAction(`${actionsPrefix}/RESET_MESSAGE`);\n\nconst users = handleActions(\n  {\n    [setUsers]: (_, action) => action.payload,\n    [addUser]: (state, action) => [action.payload, ...state],\n    [updateUser]: (state, action) => state.map(user => user.userId === action.payload.userId ? action.payload : user),\n    [removeUser]: (state, action) => state.filter(user => user.socketId !== action.payload)\n  },\n  []\n);\n\nconst messages = handleActions(\n  {\n    [appendMessage]: (state, action) =>  [...state, action.payload],\n    [setRoomHistory]: (state, action) => action.payload,\n    [setToZeroMessages]: () => []\n  },\n  []\n);\n\nconst selectedRoom = handleActions(\n  {\n    [setSelectedRoom]: (_, action) => action.payload\n  },\n  null\n);\n\nconst messageText = handleActions({\n  [setMessageText]: (_, action) => action.payload,\n  [resetMessage]: () => ''\n}, '')\n\nexport default combineReducers({\n  users,\n  messages,\n  selectedRoom,\n  messageText\n});\n\nexport const connectSocket = () => (dispatch, getState) => {\n  const userProfile = userProfileSelector(getState());\n  socket = socketIO('http://localhost:3000');\n\n  socket.emit('users:connect', { userId: userProfile.id, username: userProfile.username });\n\n  socket\n    .on('users:list', data => dispatch(setUsers(data)))\n    .on('users:add', data => dispatch(addUser(data)))\n    .on('users:leave', data => {\n      dispatch(removeUser(data))\n      const selectedRoom = chatSelectedRoomSelector(getState())\n      if (selectedRoom && selectedRoom.socketId === data) dispatch(setSelectedRoom(null))\n    })\n    .on('message:history', data => dispatch(setRoomHistory(data)))\n    .on('message:add', data => dispatch(appendMessage(data)));\n};\n\nexport const connectRoom = ({ userId, socketId }) => (dispatch, getState) => {\n  const userProfile = userProfileSelector(getState());\n  dispatch(setToZeroMessages())\n  dispatch(setSelectedRoom({ recipientId: userId, socketId }))\n  \n  socket.emit('message:history', { recipientId: userId, userId: userProfile.id })\n}\n\nexport const sendMessage = () => (dispatch, getState) => {\n  const state = getState()\n  const userProfile = userProfileSelector(state);\n  const selectedRoom = chatSelectedRoomSelector(state);\n  const messageText = chatMessageText(state)\n  socket.emit('message:add', { senderId: userProfile.id, recipientId: selectedRoom.recipientId, roomId: selectedRoom.socketId, text: messageText });\n  dispatch(resetMessage())\n};\n\n\nexport const disconnectSocket = () => (dispatch) => {\n  socket && socket.disconnect()\n  dispatch(setUsers([]))\n  dispatch(setToZeroMessages())\n  dispatch(setSelectedRoom(null))\n  dispatch(resetMessage())\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { combineReducers } from 'redux';\nimport request from '../../helpers/request';\nexport const isLoadingNewsListSelector = state => state.news.isLoadingNewsList;\nexport const isLoadingNewsFormSelector = state => state.news.isLoadingNewsForm;\nexport const isLoadedSelector = state => state.news.isLoaded;\nexport const newsListSelector = state => state.news.news;\nconst actionsPrefix = 'NEWS';\nexport const setIsLoadingNewsList = createAction(\"\".concat(actionsPrefix, \"/SET_IS_LOADING_NEWS_LIST\"));\nexport const setIsLoadingNewsForm = createAction(\"\".concat(actionsPrefix, \"/SET_IS_LOADING_NEWS_FORM\"));\nexport const setNewsList = createAction(\"\".concat(actionsPrefix, \"/SET_NEWS_LIST\"));\nexport const appendNews = createAction(\"\".concat(actionsPrefix, \"/APPEND_NEWS\"));\nexport const setToZeroNewsList = createAction(\"\".concat(actionsPrefix, \"/SET_TO_ZERO_NEWS_LIST\"));\nexport const setIsLoaded = createAction(\"\".concat(actionsPrefix, \"/SET_IS_LOADED\"));\nconst isLoadingNewsList = handleActions({\n  [setIsLoadingNewsList]: (_, action) => action.payload\n}, false);\nconst isLoadingNewsForm = handleActions({\n  [setIsLoadingNewsForm]: (_, action) => action.payload\n}, false);\nconst isLoaded = handleActions({\n  [setNewsList]: (_, action) => true\n}, false);\nconst news = handleActions({\n  [setNewsList]: (_, action) => action.payload,\n  [appendNews]: (state, action) => [action.payload, ...state],\n  [setToZeroNewsList]: () => []\n}, []);\nexport default combineReducers({\n  isLoadingNewsList,\n  isLoadingNewsForm,\n  isLoaded,\n  news\n});\nexport const getNews = () => (dispatch, getState) => {\n  if (isLoadedSelector(getState())) return;\n  dispatch(setIsLoadingNewsList(true));\n  request({\n    url: '/news',\n    method: 'GET',\n    getState,\n    dispatch\n  }).then(data => dispatch(setNewsList(data))).catch(error => console.log(error)).finally(() => dispatch(setIsLoadingNewsList(false)));\n};\nexport const createNews = ({\n  title,\n  text\n}) => (dispatch, getState) => new Promise((resolve, reject) => {\n  const data = {\n    title,\n    text\n  };\n  dispatch(setIsLoadingNewsForm(true));\n  request({\n    url: '/news',\n    method: 'POST',\n    data,\n    getState,\n    dispatch\n  }).then(data => {\n    dispatch(setNewsList(data));\n    resolve(data);\n  }).catch(error => {\n    reject(error);\n  }).finally(() => dispatch(setIsLoadingNewsForm(false)));\n});\nexport const updateNews = ({\n  id,\n  title,\n  text\n}) => (dispatch, getState) => new Promise((resolve, reject) => {\n  const data = {\n    title,\n    text\n  };\n  dispatch(setIsLoadingNewsForm(true));\n  request({\n    url: \"/news/\".concat(id),\n    method: 'PATCH',\n    data,\n    getState,\n    dispatch\n  }).then(data => {\n    dispatch(setNewsList(data));\n    resolve(data);\n  }).catch(error => {\n    reject(error);\n  }).finally(() => dispatch(setIsLoadingNewsForm(false)));\n});\nexport const deleteNews = ({\n  id\n}) => (dispatch, getState) => new Promise((resolve, reject) => {\n  dispatch(setIsLoadingNewsList(true));\n  request({\n    url: \"/news/\".concat(id),\n    method: 'DELETE',\n    getState,\n    dispatch\n  }).then(data => {\n    dispatch(setNewsList(data));\n    resolve(data);\n  }).catch(error => {\n    reject(error);\n  }).finally(() => dispatch(setIsLoadingNewsList(false)));\n});","map":{"version":3,"sources":["/Users/tweecezor/Desktop/nodeJS/src/store/news/index.js"],"names":["createAction","handleActions","combineReducers","request","isLoadingNewsListSelector","state","news","isLoadingNewsList","isLoadingNewsFormSelector","isLoadingNewsForm","isLoadedSelector","isLoaded","newsListSelector","actionsPrefix","setIsLoadingNewsList","setIsLoadingNewsForm","setNewsList","appendNews","setToZeroNewsList","setIsLoaded","_","action","payload","getNews","dispatch","getState","url","method","then","data","catch","error","console","log","finally","createNews","title","text","Promise","resolve","reject","updateNews","id","deleteNews"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,OAAO,MAAMC,yBAAyB,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,iBAAtD;AACP,OAAO,MAAMC,yBAAyB,GAAGH,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWG,iBAAtD;AACP,OAAO,MAAMC,gBAAgB,GAAGL,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWK,QAA7C;AACP,OAAO,MAAMC,gBAAgB,GAAGP,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWA,IAA7C;AAEP,MAAMO,aAAa,GAAG,MAAtB;AACA,OAAO,MAAMC,oBAAoB,GAAGd,YAAY,WAAIa,aAAJ,+BAAzC;AACP,OAAO,MAAME,oBAAoB,GAAGf,YAAY,WAAIa,aAAJ,+BAAzC;AACP,OAAO,MAAMG,WAAW,GAAGhB,YAAY,WAAIa,aAAJ,oBAAhC;AACP,OAAO,MAAMI,UAAU,GAAGjB,YAAY,WAAIa,aAAJ,kBAA/B;AACP,OAAO,MAAMK,iBAAiB,GAAGlB,YAAY,WAAIa,aAAJ,4BAAtC;AACP,OAAO,MAAMM,WAAW,GAAGnB,YAAY,WAAIa,aAAJ,oBAAhC;AAGP,MAAMN,iBAAiB,GAAGN,aAAa,CAAC;AACtC,GAACa,oBAAD,GAAwB,CAACM,CAAD,EAAIC,MAAJ,KAAeA,MAAM,CAACC;AADR,CAAD,EAEpC,KAFoC,CAAvC;AAIA,MAAMb,iBAAiB,GAAGR,aAAa,CAAC;AACtC,GAACc,oBAAD,GAAwB,CAACK,CAAD,EAAIC,MAAJ,KAAeA,MAAM,CAACC;AADR,CAAD,EAEpC,KAFoC,CAAvC;AAIA,MAAMX,QAAQ,GAAGV,aAAa,CAAC;AAC7B,GAACe,WAAD,GAAe,CAACI,CAAD,EAAIC,MAAJ,KAAe;AADD,CAAD,EAE3B,KAF2B,CAA9B;AAIA,MAAMf,IAAI,GAAGL,aAAa,CAAC;AACzB,GAACe,WAAD,GAAe,CAACI,CAAD,EAAIC,MAAJ,KAAeA,MAAM,CAACC,OADZ;AAEzB,GAACL,UAAD,GAAc,CAACZ,KAAD,EAAQgB,MAAR,KAAmB,CAACA,MAAM,CAACC,OAAR,EAAiB,GAAGjB,KAApB,CAFR;AAGzB,GAACa,iBAAD,GAAqB,MAAM;AAHF,CAAD,EAIvB,EAJuB,CAA1B;AAMA,eAAehB,eAAe,CAAC;AAC7BK,EAAAA,iBAD6B;AAE7BE,EAAAA,iBAF6B;AAG7BE,EAAAA,QAH6B;AAI7BL,EAAAA;AAJ6B,CAAD,CAA9B;AAOA,OAAO,MAAMiB,OAAO,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACnD,MAAIf,gBAAgB,CAACe,QAAQ,EAAT,CAApB,EAAkC;AAClCD,EAAAA,QAAQ,CAACV,oBAAoB,CAAC,IAAD,CAArB,CAAR;AACAX,EAAAA,OAAO,CAAC;AAAEuB,IAAAA,GAAG,EAAE,OAAP;AAAgBC,IAAAA,MAAM,EAAE,KAAxB;AAA+BF,IAAAA,QAA/B;AAAyCD,IAAAA;AAAzC,GAAD,CAAP,CACGI,IADH,CACQC,IAAI,IAAIL,QAAQ,CAACR,WAAW,CAACa,IAAD,CAAZ,CADxB,EAEGC,KAFH,CAESC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAFlB,EAGGG,OAHH,CAGW,MAAMV,QAAQ,CAACV,oBAAoB,CAAC,KAAD,CAArB,CAHzB;AAID,CAPM;AASP,OAAO,MAAMqB,UAAU,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAqB,CAACb,QAAD,EAAWC,QAAX,KAAwB,IAAIa,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtG,QAAMX,IAAI,GAAG;AAAEO,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAb;AACAb,EAAAA,QAAQ,CAACT,oBAAoB,CAAC,IAAD,CAArB,CAAR;AACAZ,EAAAA,OAAO,CAAC;AAAEuB,IAAAA,GAAG,EAAE,OAAP;AAAgBC,IAAAA,MAAM,EAAE,MAAxB;AAAgCE,IAAAA,IAAhC;AAAsCJ,IAAAA,QAAtC;AAAgDD,IAAAA;AAAhD,GAAD,CAAP,CACGI,IADH,CACQC,IAAI,IAAI;AACZL,IAAAA,QAAQ,CAACR,WAAW,CAACa,IAAD,CAAZ,CAAR;AACAU,IAAAA,OAAO,CAACV,IAAD,CAAP;AACD,GAJH,EAKGC,KALH,CAKSC,KAAK,IAAI;AACdS,IAAAA,MAAM,CAACT,KAAD,CAAN;AACD,GAPH,EAQGG,OARH,CAQW,MAAOV,QAAQ,CAACT,oBAAoB,CAAC,KAAD,CAArB,CAR1B;AASD,CAZsE,CAAhE;AAcP,OAAO,MAAM0B,UAAU,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMN,EAAAA,KAAN;AAAaC,EAAAA;AAAb,CAAD,KAAyB,CAACb,QAAD,EAAWC,QAAX,KAAwB,IAAIa,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC1G,QAAMX,IAAI,GAAG;AAAEO,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAb;AACAb,EAAAA,QAAQ,CAACT,oBAAoB,CAAC,IAAD,CAArB,CAAR;AACAZ,EAAAA,OAAO,CAAC;AAAEuB,IAAAA,GAAG,kBAAWgB,EAAX,CAAL;AAAsBf,IAAAA,MAAM,EAAE,OAA9B;AAAuCE,IAAAA,IAAvC;AAA6CJ,IAAAA,QAA7C;AAAuDD,IAAAA;AAAvD,GAAD,CAAP,CACGI,IADH,CACQC,IAAI,IAAI;AACZL,IAAAA,QAAQ,CAACR,WAAW,CAACa,IAAD,CAAZ,CAAR;AACAU,IAAAA,OAAO,CAACV,IAAD,CAAP;AACD,GAJH,EAKGC,KALH,CAKSC,KAAK,IAAI;AACdS,IAAAA,MAAM,CAACT,KAAD,CAAN;AACD,GAPH,EAQGG,OARH,CAQW,MAAOV,QAAQ,CAACT,oBAAoB,CAAC,KAAD,CAArB,CAR1B;AASD,CAZ0E,CAApE;AAcP,OAAO,MAAM4B,UAAU,GAAG,CAAC;AAAED,EAAAA;AAAF,CAAD,KAAY,CAAClB,QAAD,EAAWC,QAAX,KAAwB,IAAIa,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7FhB,EAAAA,QAAQ,CAACV,oBAAoB,CAAC,IAAD,CAArB,CAAR;AACAX,EAAAA,OAAO,CAAC;AAAEuB,IAAAA,GAAG,kBAAWgB,EAAX,CAAL;AAAsBf,IAAAA,MAAM,EAAE,QAA9B;AAAwCF,IAAAA,QAAxC;AAAkDD,IAAAA;AAAlD,GAAD,CAAP,CACGI,IADH,CACQC,IAAI,IAAI;AACZL,IAAAA,QAAQ,CAACR,WAAW,CAACa,IAAD,CAAZ,CAAR;AACAU,IAAAA,OAAO,CAACV,IAAD,CAAP;AACD,GAJH,EAKGC,KALH,CAKSC,KAAK,IAAI;AACdS,IAAAA,MAAM,CAACT,KAAD,CAAN;AACD,GAPH,EAQGG,OARH,CAQW,MAAOV,QAAQ,CAACV,oBAAoB,CAAC,KAAD,CAArB,CAR1B;AASD,CAX6D,CAAvD","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport { combineReducers } from 'redux';\nimport request from '../../helpers/request';\n\nexport const isLoadingNewsListSelector = state => state.news.isLoadingNewsList;\nexport const isLoadingNewsFormSelector = state => state.news.isLoadingNewsForm;\nexport const isLoadedSelector = state => state.news.isLoaded;\nexport const newsListSelector = state => state.news.news;\n\nconst actionsPrefix = 'NEWS'\nexport const setIsLoadingNewsList = createAction(`${actionsPrefix}/SET_IS_LOADING_NEWS_LIST`)\nexport const setIsLoadingNewsForm = createAction(`${actionsPrefix}/SET_IS_LOADING_NEWS_FORM`)\nexport const setNewsList = createAction(`${actionsPrefix}/SET_NEWS_LIST`)\nexport const appendNews = createAction(`${actionsPrefix}/APPEND_NEWS`)\nexport const setToZeroNewsList = createAction(`${actionsPrefix}/SET_TO_ZERO_NEWS_LIST`)\nexport const setIsLoaded = createAction(`${actionsPrefix}/SET_IS_LOADED`)\n\n\nconst isLoadingNewsList = handleActions({\n  [setIsLoadingNewsList]: (_, action) => action.payload\n}, false)\n\nconst isLoadingNewsForm = handleActions({\n  [setIsLoadingNewsForm]: (_, action) => action.payload\n}, false)\n\nconst isLoaded = handleActions({\n  [setNewsList]: (_, action) => true\n}, false)\n\nconst news = handleActions({\n  [setNewsList]: (_, action) => action.payload,\n  [appendNews]: (state, action) => [action.payload, ...state],\n  [setToZeroNewsList]: () => []\n}, [])\n\nexport default combineReducers({\n  isLoadingNewsList,\n  isLoadingNewsForm,\n  isLoaded,\n  news\n})\n\nexport const getNews = () => (dispatch, getState) => {\n  if (isLoadedSelector(getState())) return;\n  dispatch(setIsLoadingNewsList(true))\n  request({ url: '/news', method: 'GET', getState, dispatch })\n    .then(data => dispatch(setNewsList(data)))\n    .catch(error => console.log(error))\n    .finally(() => dispatch(setIsLoadingNewsList(false)))\n}\n\nexport const createNews = ({ title, text }) => (dispatch, getState) => new Promise((resolve, reject) => {\n  const data = { title, text }\n  dispatch(setIsLoadingNewsForm(true))\n  request({ url: '/news', method: 'POST', data, getState, dispatch })\n    .then(data => {\n      dispatch(setNewsList(data))\n      resolve(data)\n    })\n    .catch(error => {\n      reject(error)\n    })\n    .finally(() =>  dispatch(setIsLoadingNewsForm(false)))\n})\n\nexport const updateNews = ({ id, title, text }) => (dispatch, getState) => new Promise((resolve, reject) => {\n  const data = { title, text }\n  dispatch(setIsLoadingNewsForm(true))\n  request({ url: `/news/${id}`, method: 'PATCH', data, getState, dispatch })\n    .then(data => {\n      dispatch(setNewsList(data))\n      resolve(data)\n    })\n    .catch(error => {\n      reject(error)\n    })\n    .finally(() =>  dispatch(setIsLoadingNewsForm(false)))\n})\n\nexport const deleteNews = ({ id }) => (dispatch, getState) => new Promise((resolve, reject) => {\n  dispatch(setIsLoadingNewsList(true))\n  request({ url: `/news/${id}`, method: 'DELETE', getState, dispatch })\n    .then(data => {\n      dispatch(setNewsList(data))\n      resolve(data)\n    })\n    .catch(error => {\n      reject(error)\n    })\n    .finally(() =>  dispatch(setIsLoadingNewsList(false)))\n})"]},"metadata":{},"sourceType":"module"}